type Query {
  collection(id: ID!): Collection
  collections: [Collection]
}

type Mutation {
  createCollection(input: CreateCollectionInput!): Collection
  deleteCollection(id: ID!): Success
  updateCollection(id: ID!, input: UpdateCollectionInput!): Collection
  likeCollection(id: ID!): Collection
  unlikeCollection(id: ID!): Collection
  addNewItemToCollection(id: ID!, input: AddNewItemsToCollectionInput!): Collection
  addItemToCollection(id: ID!, itemId: ID!): Collection
  removeItemFromCollection(id: ID!, itemId: ID!): Collection
  commentOnCollection(id: ID!, text: String!): Collection
}

type Collection {
  id: ID
  name: String
  description: String
  user: User
  userId: ID
  likes: [Like]
  shares: [Share]
  comments: [Comment]
  items: [Item]
  _count: CollectionCounts
  createdAt: String
  updatedAt: String
}

type CollectionCounts {
  likes: Int
  shares: Int
  comments: Int
  items: Int
}

type Item {
  id: ID
  name: String
  make: String
  description: String
  type: String
  price: Float
  metadata: JSON
  currency: String
  links: [Link]
}

type Link {
  url: String!
  name: String
  description: String
  type: String
  metadata: JSON
}

type Like {
  id: ID
}

type Share {
  id: ID
}

type Comment {
  id: ID
}

input CreateCollectionInput {
  name: String!
  description: String
}

input UpdateCollectionInput {
  name: String
  description: String
}

input CreateItemInput {
  name: String!
  make: String
  description: String
  type: String!
  price: Float
  metadata: JSON
  currency: String
  links: [LinkInput]

}

input UpdateItemInput {
  name: String
  make: String
  description: String
  type: String
  price: Float
  metadata: JSON
  currency: String
  links: [LinkInput]
}

input AddNewItemsToCollectionInput {
  items: [CreateItemInput]
}

input LinkInput {
  url: String!
  name: String
  description: String
  type: String
  metadata: JSON
}
